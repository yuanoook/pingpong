<div>
  <div class="stage"></div>
  <div component="stats" src="/static/component/stats.htm" version="0.1"></div>
  <div component="dat.gui" src="/static/component/dat.gui.htm" version="Math.random()"></div>
  <div component="window_resize" src="/static/component/window.resize.htm" version="Math.random()"></div>
</div>
<script src="/static/js/three.js"></script>
<script>
var me = this;
var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);
var renderer = new THREE.WebGLRenderer();
renderer.setClearColor(0xEEEEEE);
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.shadowMapEnabled = true;

var planeGeometry = new THREE.PlaneBufferGeometry(60, 40);
var planeMaterial = new THREE.MeshLambertMaterial({color:0xcccccc});
var plane = new THREE.Mesh(planeGeometry, planeMaterial);

plane.rotation.x = -0.5 * Math.PI;
plane.position.x = 7;
plane.position.y = 0;
plane.position.z = -5;
plane.receiveShadow = true;

scene.add(plane);

var axes = new THREE.AxisHelper(30);
scene.add(axes);

var spotLight = new THREE.SpotLight(0xffffff);

spotLight.position.set(-40, 60, -10);
spotLight.castShadow = true;

scene.add(spotLight);

var ambientLight = new THREE.AmbientLight(0x0c0c0c);
scene.add(ambientLight);

scene.fog = new THREE.Fog(0xffffff, 0.015, 100);
// scene.fog = new THREE.FogExp2(0xffffff, 0.01);
// scene.overrideMaterial = new THREE.MeshLambertMaterial({color:0xffffff});

camera.position.x = -30;
camera.position.y = 40;
camera.position.z = 30;
camera.lookAt(scene.position);
x = me;
var controls = me.controls = {
  rotationSpeed: 0.02,
  maxNumberOfObjects: 20,
  numberOfObjects: 1,
  randRotation: false,
  addCube: function(){
    var cubeSize = Math.ceil(Math.random() * 3);
    var cubeGeometry = new THREE.BoxGeometry(cubeSize,cubeSize,cubeSize);
    var cubeMaterial = new THREE.MeshLambertMaterial({color:Math.random() * 0xffffff});
    var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
    cube.castShadow = true;
    cube.name = "cube-" + scene.children.length;
    cube.position.x = plane.position.x + Math.round((Math.random()-0.5) * planeGeometry.parameters.width);
    cube.position.y = plane.position.y + Math.round(Math.random() * 5);
    cube.position.z = plane.position.z + Math.round((Math.random()-0.5) * planeGeometry.parameters.height);

    if(this.randRotation){
      with(cube.rotation){
        x = Math.random()*2*Math.PI;
        y = Math.random()*2*Math.PI;
        z = Math.random()*2*Math.PI;
      }
    }
    
    scene.add(cube);
    this.numberOfObjects = scene.children.length;
  },
  removeCube: function(){
    this.removeLastCube();
  },
  removeLastCube: function(){
    var allChildren = scene.children;
    var lastObject = allChildren[allChildren.length-1];
    if(lastObject instanceof THREE.Mesh){
      scene.remove(lastObject);
    }
    this.numberOfObjects = scene.children.length;
  },
  removeFirstCube: function(){
    var allChildren = scene.children;
    for(key in allChildren){
      if( allChildren.hasOwnProperty(key) && allChildren[key] instanceof THREE.Mesh && /cube/.test(allChildren[key]['name']) ){
        scene.remove(allChildren[key]);
        break;
      }
    }
    this.numberOfObjects = scene.children.length;
  },
  outputObjects: function(){
    console.log(scene.children);
  }
};

me.on('scene_update',function(){
  if(controls.numberOfObjects<=controls.maxNumberOfObjects-1){
    controls.addCube();
  }else if(controls.numberOfObjects>controls.maxNumberOfObjects){
    controls.removeFirstCube();
  }

  scene.traverse(function(obj){
    if(obj instanceof THREE.Mesh && obj != plane){
      with(obj.rotation){
        x += controls.rotationSpeed;
        y += controls.rotationSpeed;
        z += controls.rotationSpeed;
      }
    }
  });
});

me.render();

me.on('window_resize', function(){
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

var stage = me.find('.stage').get(0);
stage.appendChild(renderer.domElement);
renderScene();

function renderScene(){
  me.trigger({type:'scene_update'});
  requestAnimationFrame(renderScene);
  renderer.render(scene, camera);
}
</script>
