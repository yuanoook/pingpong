<div>
  <div class="stage"></div>
  <div component="stats" src="/static/component/stats.htm" version=""></div>
  <div component="dat.gui" src="/static/component/dat.gui.htm" version="Math.random()"></div>
  <div component="window_resize" src="/static/component/window.resize.htm" version=""></div>
</div>
<script src="/static/js/three.js"></script>
<script>
var me = this;
var scene = window.scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);
var renderer = new THREE.WebGLRenderer();
renderer.setClearColor(0xEEEEEE);
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.shadowMapEnabled = true;

var planeGeometry = new THREE.PlaneBufferGeometry(60, 40);
var planeMaterial = new THREE.MeshLambertMaterial({color:0xcccccc});
var plane = new THREE.Mesh(planeGeometry, planeMaterial);

plane.rotation.x = -0.5 * Math.PI;
plane.position.x = 7;
plane.position.y = 0;
plane.position.z = -5;
plane.receiveShadow = true;

scene.add(plane);

var axes = new THREE.AxisHelper(30);
scene.add(axes);

var spotLight = new THREE.SpotLight(0xffffff);

spotLight.position.set(-40, 60, -10);
spotLight.castShadow = true;

scene.add(spotLight);

var ambientLight = new THREE.AmbientLight(0x0c0c0c);
scene.add(ambientLight);

scene.fog = new THREE.Fog(0xffffff, 0.015, 100);

camera.position.x = -30;
camera.position.y = 40;
camera.position.z = 30;
camera.lookAt(scene.position);

var controls = me.controls = {
  outputObjects: function(){
    console.log(scene.children);
  },
  scene: {
    rotation: {
      x: 0,
      y: 0,
      z: 0
    },
    position: {
      x: 0,
      y: 0,
      z: 0
    },
    scale: {
      x: 1,
      y: 1,
      z: 1
    },
    size: 1
  },
  cube: {
    rotation: {
      x: 0,
      y: 0,
      z: 0
    },
    position: {
      x: 0,
      y: 0,
      z: 0
    },
    scale: {
      x: 1,
      y: 1,
      z: 1
    },
    vertices: [
      [1,3,1],
      [1,3,-1],
      [1,-1,1],
      [1,-1,-1],
      [-1,3,-1],
      [-1,3,1],
      [-1,-1,-1],
      [-1,-1,1],
    ],
    size: 1,
    wireframe: false
  }
};

function createCubeVertices(){
  return controls.cube.vertices.map(function(vertice){
    return new THREE.Vector3(
      vertice[0] * controls.cube.size,
      vertice[1] * controls.cube.size,
      vertice[2] * controls.cube.size
    );
  });
}

function addCube(){
  var vertices = createCubeVertices();
  var faces = [
    new THREE.Face3(0,2,1),
    new THREE.Face3(2,3,1),
    new THREE.Face3(4,6,5),
    new THREE.Face3(6,7,5),
    new THREE.Face3(4,5,1),
    new THREE.Face3(5,0,1),
    new THREE.Face3(7,6,2),
    new THREE.Face3(6,3,2),
    new THREE.Face3(5,7,0),
    new THREE.Face3(7,2,0),
    new THREE.Face3(1,3,4),
    new THREE.Face3(3,6,4)
  ];

  var cubeGeometry = new THREE.Geometry();
  cubeGeometry.vertices = vertices;
  cubeGeometry.faces = faces;
  cubeGeometry.computeFaceNormals();
  var cubeMaterial = new THREE.MeshLambertMaterial({color:Math.random() * 0xffffff, wireframe:false});
  var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);

  cube.castShadow = true;
  cube.name = "cube-" + scene.children.length;
  scene.add(cube);

  return cube;
}

var cube = window.cube = addCube();
me.on('scene_update',function(){
  // [{scene:scene},{cube:cube}].forEach(function(obj){
  //
  // });

  with(scene.rotation){
    x = (controls.scene.rotation.x/180)*Math.PI;
    y = (controls.scene.rotation.y/180)*Math.PI;
    z = (controls.scene.rotation.z/180)*Math.PI;
  }

  with(scene.position){
    x = controls.scene.position.x;
    y = controls.scene.position.y;
    z = controls.scene.position.z;
  }

  with(scene.scale){
    x = controls.scene.scale.x * controls.scene.size;
    y = controls.scene.scale.y * controls.scene.size;
    z = controls.scene.scale.z * controls.scene.size;
  }

///////////////////////////////////

  with(cube.rotation){
    x = (controls.cube.rotation.x/180)*Math.PI;
    y = (controls.cube.rotation.y/180)*Math.PI;
    z = (controls.cube.rotation.z/180)*Math.PI;
  }

  with(cube.position){
    x = controls.cube.position.x;
    y = controls.cube.position.y;
    z = controls.cube.position.z;
  }

  with(cube.scale){
    x = controls.cube.scale.x;
    y = controls.cube.scale.y;
    z = controls.cube.scale.z;
  }

  with(cube.geometry){
    vertices = createCubeVertices();
    verticesNeedUpdate = true;
    computeFaceNormals();
  }

  with(cube.material){
    wireframe = controls.cube.wireframe;
  }
});

me.render();

me.on('window_resize', function(){
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

var stage = me.find('.stage').get(0);
stage.appendChild(renderer.domElement);
renderScene();

function renderScene(){
  me.trigger({type:'scene_update'});
  requestAnimationFrame(renderScene);
  renderer.render(scene, camera);
}
</script>
